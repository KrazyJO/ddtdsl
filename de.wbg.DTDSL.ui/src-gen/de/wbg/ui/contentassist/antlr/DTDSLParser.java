/*
* generated by Xtext
*/
package de.wbg.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.wbg.services.DTDSLGrammarAccess;

public class DTDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private DTDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.wbg.ui.contentassist.antlr.internal.InternalDTDSLParser createParser() {
		de.wbg.ui.contentassist.antlr.internal.InternalDTDSLParser result = new de.wbg.ui.contentassist.antlr.internal.InternalDTDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDTDSLAccess().getTypeAlternatives_6_0(), "rule__DTDSL__TypeAlternatives_6_0");
					put(grammarAccess.getObjectNodeTypeAccess().getAlternatives(), "rule__ObjectNodeType__Alternatives");
					put(grammarAccess.getObjectDescriptionInnerAccess().getAlternatives_0(), "rule__ObjectDescriptionInner__Alternatives_0");
					put(grammarAccess.getObjectAttributeAccess().getAlternatives_3(), "rule__ObjectAttribute__Alternatives_3");
					put(grammarAccess.getJavaCodeOrIDAccess().getAlternatives(), "rule__JavaCodeOrID__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getObjectMaybeAccess().getAlternatives(), "rule__ObjectMaybe__Alternatives");
					put(grammarAccess.getObjectMaybeInnerAccess().getAlternatives(), "rule__ObjectMaybeInner__Alternatives");
					put(grammarAccess.getKeywordAccess().getAlternatives(), "rule__Keyword__Alternatives");
					put(grammarAccess.getDTDSLAccess().getGroup(), "rule__DTDSL__Group__0");
					put(grammarAccess.getStartPointAccess().getGroup(), "rule__StartPoint__Group__0");
					put(grammarAccess.getObjectDescriptionAccess().getGroup(), "rule__ObjectDescription__Group__0");
					put(grammarAccess.getObjectDescriptionInnerAccess().getGroup(), "rule__ObjectDescriptionInner__Group__0");
					put(grammarAccess.getObjectAttributeAccess().getGroup(), "rule__ObjectAttribute__Group__0");
					put(grammarAccess.getObjectNodeAccess().getGroup(), "rule__ObjectNode__Group__0");
					put(grammarAccess.getObjectNextAccess().getGroup(), "rule__ObjectNext__Group__0");
					put(grammarAccess.getJavaCodeOrIDAccess().getGroup_0(), "rule__JavaCodeOrID__Group_0__0");
					put(grammarAccess.getObjectManyAccess().getGroup(), "rule__ObjectMany__Group__0");
					put(grammarAccess.getObjectChoiceAccess().getGroup(), "rule__ObjectChoice__Group__0");
					put(grammarAccess.getObjectChoiceAccess().getGroup_2(), "rule__ObjectChoice__Group_2__0");
					put(grammarAccess.getObjectMaybeAccess().getGroup_1(), "rule__ObjectMaybe__Group_1__0");
					put(grammarAccess.getDTDSLAccess().getParserNameAssignment_2(), "rule__DTDSL__ParserNameAssignment_2");
					put(grammarAccess.getDTDSLAccess().getTypeAssignment_6(), "rule__DTDSL__TypeAssignment_6");
					put(grammarAccess.getDTDSLAccess().getObjDescriptionAssignment_8(), "rule__DTDSL__ObjDescriptionAssignment_8");
					put(grammarAccess.getDTDSLAccess().getStartAssignment_9(), "rule__DTDSL__StartAssignment_9");
					put(grammarAccess.getStartPointAccess().getBeginAssignment_2(), "rule__StartPoint__BeginAssignment_2");
					put(grammarAccess.getObjectDescriptionAccess().getNameAssignment_0(), "rule__ObjectDescription__NameAssignment_0");
					put(grammarAccess.getObjectDescriptionAccess().getNoNodeAssignment_1(), "rule__ObjectDescription__NoNodeAssignment_1");
					put(grammarAccess.getObjectDescriptionAccess().getDescriptionAssignment_4(), "rule__ObjectDescription__DescriptionAssignment_4");
					put(grammarAccess.getObjectAttributeAccess().getAttributesAssignment_1(), "rule__ObjectAttribute__AttributesAssignment_1");
					put(grammarAccess.getObjectAttributeAccess().getTypesAssignment_3_0(), "rule__ObjectAttribute__TypesAssignment_3_0");
					put(grammarAccess.getObjectAttributeAccess().getInnerAssignment_3_1(), "rule__ObjectAttribute__InnerAssignment_3_1");
					put(grammarAccess.getObjectNodeAccess().getAttributesAssignment_1(), "rule__ObjectNode__AttributesAssignment_1");
					put(grammarAccess.getObjectNodeAccess().getInnerAssignment_3(), "rule__ObjectNode__InnerAssignment_3");
					put(grammarAccess.getObjectNextAccess().getAttributeAssignment_1(), "rule__ObjectNext__AttributeAssignment_1");
					put(grammarAccess.getObjectNextAccess().getObjectDesriptionAssignment_3(), "rule__ObjectNext__ObjectDesriptionAssignment_3");
					put(grammarAccess.getJavaCodeOrIDAccess().getCodeAssignment_0_2(), "rule__JavaCodeOrID__CodeAssignment_0_2");
					put(grammarAccess.getJavaCodeOrIDAccess().getIdAssignment_1(), "rule__JavaCodeOrID__IdAssignment_1");
					put(grammarAccess.getObjectManyAccess().getOptionAssignment_0(), "rule__ObjectMany__OptionAssignment_0");
					put(grammarAccess.getObjectChoiceAccess().getOptionsAssignment_1(), "rule__ObjectChoice__OptionsAssignment_1");
					put(grammarAccess.getObjectChoiceAccess().getOptionsAssignment_2_1(), "rule__ObjectChoice__OptionsAssignment_2_1");
					put(grammarAccess.getObjectMaybeAccess().getOptionAssignment_0(), "rule__ObjectMaybe__OptionAssignment_0");
					put(grammarAccess.getObjectMaybeAccess().getDescriptionAssignment_1_0(), "rule__ObjectMaybe__DescriptionAssignment_1_0");
					put(grammarAccess.getKeywordAccess().getNameAssignment_0(), "rule__Keyword__NameAssignment_0");
					put(grammarAccess.getKeywordAccess().getNameAssignment_1(), "rule__Keyword__NameAssignment_1");
					put(grammarAccess.getKeywordAccess().getNameAssignment_2(), "rule__Keyword__NameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.wbg.ui.contentassist.antlr.internal.InternalDTDSLParser typedParser = (de.wbg.ui.contentassist.antlr.internal.InternalDTDSLParser) parser;
			typedParser.entryRuleDTDSL();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DTDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DTDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
