/*
* generated by Xtext
*/
package de.wbg.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DTDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DTDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DTDSL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParserNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParserNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParserNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cParserNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cParserTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cTypeAlternatives_6_0 = (Alternatives)cTypeAssignment_6.eContents().get(0);
		private final Keyword cTypeJavaObjectKeyword_6_0_0 = (Keyword)cTypeAlternatives_6_0.eContents().get(0);
		private final Keyword cTypeStringKeyword_6_0_1 = (Keyword)cTypeAlternatives_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cObjDescriptionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cObjDescriptionAbstractParserRuleCall_8_0 = (RuleCall)cObjDescriptionAssignment_8.eContents().get(0);
		private final Assignment cImportsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cImportsImportStatementParserRuleCall_9_0 = (RuleCall)cImportsAssignment_9.eContents().get(0);
		private final Assignment cStartAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cStartStartPointParserRuleCall_10_0 = (RuleCall)cStartAssignment_10.eContents().get(0);
		
		////	objDescription+=Abstract*
		//DTDSL:
		//	"parserName" "=" parserName=STRING ";" "parserType" "=" type=("javaObject" | "string") ";" objDescription+=Abstract*
		//	imports+=importStatement* start=StartPoint;
		public ParserRule getRule() { return rule; }

		//"parserName" "=" parserName=STRING ";" "parserType" "=" type=("javaObject" | "string") ";" objDescription+=Abstract*
		//imports+=importStatement* start=StartPoint
		public Group getGroup() { return cGroup; }

		//"parserName"
		public Keyword getParserNameKeyword_0() { return cParserNameKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//parserName=STRING
		public Assignment getParserNameAssignment_2() { return cParserNameAssignment_2; }

		//STRING
		public RuleCall getParserNameSTRINGTerminalRuleCall_2_0() { return cParserNameSTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//"parserType"
		public Keyword getParserTypeKeyword_4() { return cParserTypeKeyword_4; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//type=("javaObject" | "string")
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }

		//"javaObject" | "string"
		public Alternatives getTypeAlternatives_6_0() { return cTypeAlternatives_6_0; }

		//"javaObject"
		public Keyword getTypeJavaObjectKeyword_6_0_0() { return cTypeJavaObjectKeyword_6_0_0; }

		//"string"
		public Keyword getTypeStringKeyword_6_0_1() { return cTypeStringKeyword_6_0_1; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }

		//objDescription+=Abstract*
		public Assignment getObjDescriptionAssignment_8() { return cObjDescriptionAssignment_8; }

		//Abstract
		public RuleCall getObjDescriptionAbstractParserRuleCall_8_0() { return cObjDescriptionAbstractParserRuleCall_8_0; }

		//imports+=importStatement*
		public Assignment getImportsAssignment_9() { return cImportsAssignment_9; }

		//importStatement
		public RuleCall getImportsImportStatementParserRuleCall_9_0() { return cImportsImportStatementParserRuleCall_9_0; }

		//start=StartPoint
		public Assignment getStartAssignment_10() { return cStartAssignment_10; }

		//StartPoint
		public RuleCall getStartStartPointParserRuleCall_10_0() { return cStartStartPointParserRuleCall_10_0; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "importStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportClassIDTerminalRuleCall_1_0 = (RuleCall)cImportClassAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//importStatement:
		//	"import" importClass=ID ";";
		public ParserRule getRule() { return rule; }

		//"import" importClass=ID ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importClass=ID
		public Assignment getImportClassAssignment_1() { return cImportClassAssignment_1; }

		//ID
		public RuleCall getImportClassIDTerminalRuleCall_1_0() { return cImportClassIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class StartPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StartPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeginWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBeginAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cBeginObjectDescriptionCrossReference_2_0 = (CrossReference)cBeginAssignment_2.eContents().get(0);
		private final RuleCall cBeginObjectDescriptionIDTerminalRuleCall_2_0_1 = (RuleCall)cBeginObjectDescriptionCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StartPoint:
		//	"beginWith" "=" begin=[ObjectDescription] ";";
		public ParserRule getRule() { return rule; }

		//"beginWith" "=" begin=[ObjectDescription] ";"
		public Group getGroup() { return cGroup; }

		//"beginWith"
		public Keyword getBeginWithKeyword_0() { return cBeginWithKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//begin=[ObjectDescription]
		public Assignment getBeginAssignment_2() { return cBeginAssignment_2; }

		//[ObjectDescription]
		public CrossReference getBeginObjectDescriptionCrossReference_2_0() { return cBeginObjectDescriptionCrossReference_2_0; }

		//ID
		public RuleCall getBeginObjectDescriptionIDTerminalRuleCall_2_0_1() { return cBeginObjectDescriptionIDTerminalRuleCall_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AbstractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Abstract");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectDescriptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChoiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cManyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Abstract:
		//	ObjectDescription | Choice | Many;
		public ParserRule getRule() { return rule; }

		//ObjectDescription | Choice | Many
		public Alternatives getAlternatives() { return cAlternatives; }

		//ObjectDescription
		public RuleCall getObjectDescriptionParserRuleCall_0() { return cObjectDescriptionParserRuleCall_0; }

		//Choice
		public RuleCall getChoiceParserRuleCall_1() { return cChoiceParserRuleCall_1; }

		//Many
		public RuleCall getManyParserRuleCall_2() { return cManyParserRuleCall_2; }
	}

	public class ObjectDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionObjectDescriptionInnerParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjectDescription:
		//	name=ID ":" "{" description+=ObjectDescriptionInner* "}";
		public ParserRule getRule() { return rule; }

		//name=ID ":" "{" description+=ObjectDescriptionInner* "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//description+=ObjectDescriptionInner*
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//ObjectDescriptionInner
		public RuleCall getDescriptionObjectDescriptionInnerParserRuleCall_3_0() { return cDescriptionObjectDescriptionInnerParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ObjectDescriptionInnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectDescriptionInner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectNextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ObjectDescriptionInner:
		//	ObjectAttribute | ObjectNext;
		public ParserRule getRule() { return rule; }

		//ObjectAttribute | ObjectNext
		public Alternatives getAlternatives() { return cAlternatives; }

		//ObjectAttribute
		public RuleCall getObjectAttributeParserRuleCall_0() { return cObjectAttributeParserRuleCall_0; }

		//ObjectNext
		public RuleCall getObjectNextParserRuleCall_1() { return cObjectNextParserRuleCall_1; }
	}

	public class ObjectAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesIDTerminalRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Keyword cOfTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cTypesAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cTypesTypeParserRuleCall_3_0_0_0 = (RuleCall)cTypesAssignment_3_0_0.eContents().get(0);
		private final Keyword cAsKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cKeywordAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cKeywordKeywordParserRuleCall_3_0_2_0 = (RuleCall)cKeywordAssignment_3_0_2.eContents().get(0);
		private final Assignment cInnerAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cInnerObjectDescriptionCrossReference_3_1_0 = (CrossReference)cInnerAssignment_3_1.eContents().get(0);
		private final RuleCall cInnerObjectDescriptionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cInnerObjectDescriptionCrossReference_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjectAttribute:
		//	"hasAttribute" attributes=ID "ofType" (types=Type "as" keyword=Keyword | inner=[ObjectDescription]) ";";
		public ParserRule getRule() { return rule; }

		//"hasAttribute" attributes=ID "ofType" (types=Type "as" keyword=Keyword | inner=[ObjectDescription]) ";"
		public Group getGroup() { return cGroup; }

		//"hasAttribute"
		public Keyword getHasAttributeKeyword_0() { return cHasAttributeKeyword_0; }

		//attributes=ID
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//ID
		public RuleCall getAttributesIDTerminalRuleCall_1_0() { return cAttributesIDTerminalRuleCall_1_0; }

		//"ofType"
		public Keyword getOfTypeKeyword_2() { return cOfTypeKeyword_2; }

		//types=Type "as" keyword=Keyword | inner=[ObjectDescription]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//types=Type "as" keyword=Keyword
		public Group getGroup_3_0() { return cGroup_3_0; }

		//types=Type
		public Assignment getTypesAssignment_3_0_0() { return cTypesAssignment_3_0_0; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_3_0_0_0() { return cTypesTypeParserRuleCall_3_0_0_0; }

		//"as"
		public Keyword getAsKeyword_3_0_1() { return cAsKeyword_3_0_1; }

		//keyword=Keyword
		public Assignment getKeywordAssignment_3_0_2() { return cKeywordAssignment_3_0_2; }

		//Keyword
		public RuleCall getKeywordKeywordParserRuleCall_3_0_2_0() { return cKeywordKeywordParserRuleCall_3_0_2_0; }

		//inner=[ObjectDescription]
		public Assignment getInnerAssignment_3_1() { return cInnerAssignment_3_1; }

		//[ObjectDescription]
		public CrossReference getInnerObjectDescriptionCrossReference_3_1_0() { return cInnerObjectDescriptionCrossReference_3_1_0; }

		//ID
		public RuleCall getInnerObjectDescriptionIDTerminalRuleCall_3_1_0_1() { return cInnerObjectDescriptionIDTerminalRuleCall_3_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ObjectNextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectNext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasNextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeJavaCodeOrIDParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectDesriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cObjectDesriptionObjectDescriptionCrossReference_3_0 = (CrossReference)cObjectDesriptionAssignment_3.eContents().get(0);
		private final RuleCall cObjectDesriptionObjectDescriptionIDTerminalRuleCall_3_0_1 = (RuleCall)cObjectDesriptionObjectDescriptionCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjectNext:
		//	"hasNext" attribute=JavaCodeOrID "as" objectDesription=[ObjectDescription] ";";
		public ParserRule getRule() { return rule; }

		//"hasNext" attribute=JavaCodeOrID "as" objectDesription=[ObjectDescription] ";"
		public Group getGroup() { return cGroup; }

		//"hasNext"
		public Keyword getHasNextKeyword_0() { return cHasNextKeyword_0; }

		//attribute=JavaCodeOrID
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//JavaCodeOrID
		public RuleCall getAttributeJavaCodeOrIDParserRuleCall_1_0() { return cAttributeJavaCodeOrIDParserRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//objectDesription=[ObjectDescription]
		public Assignment getObjectDesriptionAssignment_3() { return cObjectDesriptionAssignment_3; }

		//[ObjectDescription]
		public CrossReference getObjectDesriptionObjectDescriptionCrossReference_3_0() { return cObjectDesriptionObjectDescriptionCrossReference_3_0; }

		//ID
		public RuleCall getObjectDesriptionObjectDescriptionIDTerminalRuleCall_3_0_1() { return cObjectDesriptionObjectDescriptionIDTerminalRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class JavaCodeOrIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaCodeOrID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cJavaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCodeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCodeSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cCodeAssignment_0_2.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//JavaCodeOrID:
		//	"java" ":" code=STRING | id=ID;
		public ParserRule getRule() { return rule; }

		//"java" ":" code=STRING | id=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"java" ":" code=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"java"
		public Keyword getJavaKeyword_0_0() { return cJavaKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//code=STRING
		public Assignment getCodeAssignment_0_2() { return cCodeAssignment_0_2; }

		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_0_2_0() { return cCodeSTRINGTerminalRuleCall_0_2_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStringKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Type:
		//	"int" | "float" | "String";
		public ParserRule getRule() { return rule; }

		//"int" | "float" | "String"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//"float"
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }

		//"String"
		public Keyword getStringKeyword_2() { return cStringKeyword_2; }
	}

	public class ManyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Many");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cManyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionObjectDescriptionInnerParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cAsteriskKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Description:
		////	 'beginWith' '=' des=Obj ';'
		////;
		//Many:
		//	{Many} "(" description+=ObjectDescriptionInner* ")" "*";
		public ParserRule getRule() { return rule; }

		//{Many} "(" description+=ObjectDescriptionInner* ")" "*"
		public Group getGroup() { return cGroup; }

		//{Many}
		public Action getManyAction_0() { return cManyAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//description+=ObjectDescriptionInner*
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//ObjectDescriptionInner
		public RuleCall getDescriptionObjectDescriptionInnerParserRuleCall_2_0() { return cDescriptionObjectDescriptionInnerParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"*"
		public Keyword getAsteriskKeyword_4() { return cAsteriskKeyword_4; }
	}

	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsKeywordParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOptionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOptionsKeywordParserRuleCall_2_1_0 = (RuleCall)cOptionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Choice:
		//	"(" options+=Keyword ("|" options+=Keyword)* ")";
		public ParserRule getRule() { return rule; }

		//"(" options+=Keyword ("|" options+=Keyword)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//options+=Keyword
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }

		//Keyword
		public RuleCall getOptionsKeywordParserRuleCall_1_0() { return cOptionsKeywordParserRuleCall_1_0; }

		//("|" options+=Keyword)*
		public Group getGroup_2() { return cGroup_2; }

		//"|"
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }

		//options+=Keyword
		public Assignment getOptionsAssignment_2_1() { return cOptionsAssignment_2_1; }

		//Keyword
		public RuleCall getOptionsKeywordParserRuleCall_2_1_0() { return cOptionsKeywordParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class MaybeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Maybe");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cObjectAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cObjectAbstractParserRuleCall_0_1_0 = (RuleCall)cObjectAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cIdObjectDescriptionCrossReference_1_0_0 = (CrossReference)cIdAssignment_1_0.eContents().get(0);
		private final RuleCall cIdObjectDescriptionIDTerminalRuleCall_1_0_0_1 = (RuleCall)cIdObjectDescriptionCrossReference_1_0_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Maybe:
		//	"(" object=Abstract | id=[ObjectDescription] ")" "?";
		public ParserRule getRule() { return rule; }

		//"(" object=Abstract | id=[ObjectDescription] ")" "?"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" object=Abstract
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//object=Abstract
		public Assignment getObjectAssignment_0_1() { return cObjectAssignment_0_1; }

		//Abstract
		public RuleCall getObjectAbstractParserRuleCall_0_1_0() { return cObjectAbstractParserRuleCall_0_1_0; }

		//id=[ObjectDescription] ")" "?"
		public Group getGroup_1() { return cGroup_1; }

		//id=[ObjectDescription]
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }

		//[ObjectDescription]
		public CrossReference getIdObjectDescriptionCrossReference_1_0_0() { return cIdObjectDescriptionCrossReference_1_0_0; }

		//ID
		public RuleCall getIdObjectDescriptionIDTerminalRuleCall_1_0_0_1() { return cIdObjectDescriptionIDTerminalRuleCall_1_0_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_2() { return cQuestionMarkKeyword_1_2; }
	}

	public class KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Keyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameKeyKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameValueKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		////Obj:
		////	STRING | Keyword 
		////; Keyword:
		//	name="Key" | name="Value" | name=ID;
		public ParserRule getRule() { return rule; }

		//name="Key" | name="Value" | name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="Key"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Key"
		public Keyword getNameKeyKeyword_0_0() { return cNameKeyKeyword_0_0; }

		//name="Value"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"Value"
		public Keyword getNameValueKeyword_1_0() { return cNameValueKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	
	
	private final DTDSLElements pDTDSL;
	private final ImportStatementElements pImportStatement;
	private final StartPointElements pStartPoint;
	private final AbstractElements pAbstract;
	private final ObjectDescriptionElements pObjectDescription;
	private final ObjectDescriptionInnerElements pObjectDescriptionInner;
	private final ObjectAttributeElements pObjectAttribute;
	private final ObjectNextElements pObjectNext;
	private final JavaCodeOrIDElements pJavaCodeOrID;
	private final TypeElements pType;
	private final ManyElements pMany;
	private final ChoiceElements pChoice;
	private final MaybeElements pMaybe;
	private final KeywordElements pKeyword;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DTDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDTDSL = new DTDSLElements();
		this.pImportStatement = new ImportStatementElements();
		this.pStartPoint = new StartPointElements();
		this.pAbstract = new AbstractElements();
		this.pObjectDescription = new ObjectDescriptionElements();
		this.pObjectDescriptionInner = new ObjectDescriptionInnerElements();
		this.pObjectAttribute = new ObjectAttributeElements();
		this.pObjectNext = new ObjectNextElements();
		this.pJavaCodeOrID = new JavaCodeOrIDElements();
		this.pType = new TypeElements();
		this.pMany = new ManyElements();
		this.pChoice = new ChoiceElements();
		this.pMaybe = new MaybeElements();
		this.pKeyword = new KeywordElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.wbg.DTDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////	objDescription+=Abstract*
	//DTDSL:
	//	"parserName" "=" parserName=STRING ";" "parserType" "=" type=("javaObject" | "string") ";" objDescription+=Abstract*
	//	imports+=importStatement* start=StartPoint;
	public DTDSLElements getDTDSLAccess() {
		return pDTDSL;
	}
	
	public ParserRule getDTDSLRule() {
		return getDTDSLAccess().getRule();
	}

	//importStatement:
	//	"import" importClass=ID ";";
	public ImportStatementElements getImportStatementAccess() {
		return pImportStatement;
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	//StartPoint:
	//	"beginWith" "=" begin=[ObjectDescription] ";";
	public StartPointElements getStartPointAccess() {
		return pStartPoint;
	}
	
	public ParserRule getStartPointRule() {
		return getStartPointAccess().getRule();
	}

	//Abstract:
	//	ObjectDescription | Choice | Many;
	public AbstractElements getAbstractAccess() {
		return pAbstract;
	}
	
	public ParserRule getAbstractRule() {
		return getAbstractAccess().getRule();
	}

	//ObjectDescription:
	//	name=ID ":" "{" description+=ObjectDescriptionInner* "}";
	public ObjectDescriptionElements getObjectDescriptionAccess() {
		return pObjectDescription;
	}
	
	public ParserRule getObjectDescriptionRule() {
		return getObjectDescriptionAccess().getRule();
	}

	//ObjectDescriptionInner:
	//	ObjectAttribute | ObjectNext;
	public ObjectDescriptionInnerElements getObjectDescriptionInnerAccess() {
		return pObjectDescriptionInner;
	}
	
	public ParserRule getObjectDescriptionInnerRule() {
		return getObjectDescriptionInnerAccess().getRule();
	}

	//ObjectAttribute:
	//	"hasAttribute" attributes=ID "ofType" (types=Type "as" keyword=Keyword | inner=[ObjectDescription]) ";";
	public ObjectAttributeElements getObjectAttributeAccess() {
		return pObjectAttribute;
	}
	
	public ParserRule getObjectAttributeRule() {
		return getObjectAttributeAccess().getRule();
	}

	//ObjectNext:
	//	"hasNext" attribute=JavaCodeOrID "as" objectDesription=[ObjectDescription] ";";
	public ObjectNextElements getObjectNextAccess() {
		return pObjectNext;
	}
	
	public ParserRule getObjectNextRule() {
		return getObjectNextAccess().getRule();
	}

	//JavaCodeOrID:
	//	"java" ":" code=STRING | id=ID;
	public JavaCodeOrIDElements getJavaCodeOrIDAccess() {
		return pJavaCodeOrID;
	}
	
	public ParserRule getJavaCodeOrIDRule() {
		return getJavaCodeOrIDAccess().getRule();
	}

	//Type:
	//	"int" | "float" | "String";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	////Description:
	////	 'beginWith' '=' des=Obj ';'
	////;
	//Many:
	//	{Many} "(" description+=ObjectDescriptionInner* ")" "*";
	public ManyElements getManyAccess() {
		return pMany;
	}
	
	public ParserRule getManyRule() {
		return getManyAccess().getRule();
	}

	//Choice:
	//	"(" options+=Keyword ("|" options+=Keyword)* ")";
	public ChoiceElements getChoiceAccess() {
		return pChoice;
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}

	//Maybe:
	//	"(" object=Abstract | id=[ObjectDescription] ")" "?";
	public MaybeElements getMaybeAccess() {
		return pMaybe;
	}
	
	public ParserRule getMaybeRule() {
		return getMaybeAccess().getRule();
	}

	////Obj:
	////	STRING | Keyword 
	////; Keyword:
	//	name="Key" | name="Value" | name=ID;
	public KeywordElements getKeywordAccess() {
		return pKeyword;
	}
	
	public ParserRule getKeywordRule() {
		return getKeywordAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
