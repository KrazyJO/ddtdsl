/*
* generated by Xtext
*/
package de.wbg.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DTDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DTDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DTDSL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParserNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParserNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParserNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cParserNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjDescriptionAbstractParserRuleCall_4_0 = (RuleCall)cObjDescriptionAssignment_4.eContents().get(0);
		private final Assignment cStartAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStartStartPointParserRuleCall_5_0 = (RuleCall)cStartAssignment_5.eContents().get(0);
		
		//DTDSL:
		//	"parserName" "=" parserName=STRING ";" objDescription+=Abstract* start=StartPoint;
		public ParserRule getRule() { return rule; }

		//"parserName" "=" parserName=STRING ";" objDescription+=Abstract* start=StartPoint
		public Group getGroup() { return cGroup; }

		//"parserName"
		public Keyword getParserNameKeyword_0() { return cParserNameKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//parserName=STRING
		public Assignment getParserNameAssignment_2() { return cParserNameAssignment_2; }

		//STRING
		public RuleCall getParserNameSTRINGTerminalRuleCall_2_0() { return cParserNameSTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//objDescription+=Abstract*
		public Assignment getObjDescriptionAssignment_4() { return cObjDescriptionAssignment_4; }

		//Abstract
		public RuleCall getObjDescriptionAbstractParserRuleCall_4_0() { return cObjDescriptionAbstractParserRuleCall_4_0; }

		//start=StartPoint
		public Assignment getStartAssignment_5() { return cStartAssignment_5; }

		//StartPoint
		public RuleCall getStartStartPointParserRuleCall_5_0() { return cStartStartPointParserRuleCall_5_0; }
	}

	public class StartPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StartPoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBeginWithKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cBeginAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cBeginObjectDescriptionCrossReference_0_2_0 = (CrossReference)cBeginAssignment_0_2.eContents().get(0);
		private final RuleCall cBeginObjectDescriptionIDTerminalRuleCall_0_2_0_1 = (RuleCall)cBeginObjectDescriptionCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBeginAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cBeginStringDescriptionCrossReference_1_0_0 = (CrossReference)cBeginAssignment_1_0.eContents().get(0);
		private final RuleCall cBeginStringDescriptionIDTerminalRuleCall_1_0_0_1 = (RuleCall)cBeginStringDescriptionCrossReference_1_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//StartPoint:
		//	"beginWith" "=" begin=[ObjectDescription] | begin=[StringDescription] ";";
		public ParserRule getRule() { return rule; }

		//"beginWith" "=" begin=[ObjectDescription] | begin=[StringDescription] ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"beginWith" "=" begin=[ObjectDescription]
		public Group getGroup_0() { return cGroup_0; }

		//"beginWith"
		public Keyword getBeginWithKeyword_0_0() { return cBeginWithKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//begin=[ObjectDescription]
		public Assignment getBeginAssignment_0_2() { return cBeginAssignment_0_2; }

		//[ObjectDescription]
		public CrossReference getBeginObjectDescriptionCrossReference_0_2_0() { return cBeginObjectDescriptionCrossReference_0_2_0; }

		//ID
		public RuleCall getBeginObjectDescriptionIDTerminalRuleCall_0_2_0_1() { return cBeginObjectDescriptionIDTerminalRuleCall_0_2_0_1; }

		//begin=[StringDescription] ";"
		public Group getGroup_1() { return cGroup_1; }

		//begin=[StringDescription]
		public Assignment getBeginAssignment_1_0() { return cBeginAssignment_1_0; }

		//[StringDescription]
		public CrossReference getBeginStringDescriptionCrossReference_1_0_0() { return cBeginStringDescriptionCrossReference_1_0_0; }

		//ID
		public RuleCall getBeginStringDescriptionIDTerminalRuleCall_1_0_0_1() { return cBeginStringDescriptionIDTerminalRuleCall_1_0_0_1; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class AbstractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Abstract");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectDescriptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringDescriptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Abstract:
		//	ObjectDescription | //| ObjectHashMapDescription
		//	StringDescription;
		public ParserRule getRule() { return rule; }

		//ObjectDescription | //| ObjectHashMapDescription
		//StringDescription
		public Alternatives getAlternatives() { return cAlternatives; }

		//ObjectDescription
		public RuleCall getObjectDescriptionParserRuleCall_0() { return cObjectDescriptionParserRuleCall_0; }

		////| ObjectHashMapDescription
		//StringDescription
		public RuleCall getStringDescriptionParserRuleCall_1() { return cStringDescriptionParserRuleCall_1; }
	}

	public class StringDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionStringDescriptionInnerParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////---------------------------  String  ---------------------------
		//StringDescription:
		//	"String" name=ID ":" "{" description+=StringDescriptionInner* "}";
		public ParserRule getRule() { return rule; }

		//"String" name=ID ":" "{" description+=StringDescriptionInner* "}"
		public Group getGroup() { return cGroup; }

		//"String"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//description+=StringDescriptionInner*
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//StringDescriptionInner
		public RuleCall getDescriptionStringDescriptionInnerParserRuleCall_4_0() { return cDescriptionStringDescriptionInnerParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class StringDescriptionInnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringDescriptionInner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringOverReadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringKeyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Assignment cKeyRefAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final CrossReference cKeyRefStringKeyCrossReference_3_0 = (CrossReference)cKeyRefAssignment_3.eContents().get(0);
		private final RuleCall cKeyRefStringKeyIDTerminalRuleCall_3_0_1 = (RuleCall)cKeyRefStringKeyCrossReference_3_0.eContents().get(1);
		private final RuleCall cStringComplexParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringOrParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStringDescriptionInVariableParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//StringDescriptionInner:
		//	StringOverRead | StringKey | StringValue | keyRef=[StringKey] | StringComplex | StringOr |
		//	StringDescriptionInVariable;
		public ParserRule getRule() { return rule; }

		//StringOverRead | StringKey | StringValue | keyRef=[StringKey] | StringComplex | StringOr | StringDescriptionInVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringOverRead
		public RuleCall getStringOverReadParserRuleCall_0() { return cStringOverReadParserRuleCall_0; }

		//StringKey
		public RuleCall getStringKeyParserRuleCall_1() { return cStringKeyParserRuleCall_1; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }

		//keyRef=[StringKey]
		public Assignment getKeyRefAssignment_3() { return cKeyRefAssignment_3; }

		//[StringKey]
		public CrossReference getKeyRefStringKeyCrossReference_3_0() { return cKeyRefStringKeyCrossReference_3_0; }

		//ID
		public RuleCall getKeyRefStringKeyIDTerminalRuleCall_3_0_1() { return cKeyRefStringKeyIDTerminalRuleCall_3_0_1; }

		//StringComplex
		public RuleCall getStringComplexParserRuleCall_4() { return cStringComplexParserRuleCall_4; }

		//StringOr
		public RuleCall getStringOrParserRuleCall_5() { return cStringOrParserRuleCall_5; }

		//StringDescriptionInVariable
		public RuleCall getStringDescriptionInVariableParserRuleCall_6() { return cStringDescriptionInVariableParserRuleCall_6; }
	}

	public class StringOverReadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringOverRead");
		private final Assignment cOverReadAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOverReadSTRINGTerminalRuleCall_0 = (RuleCall)cOverReadAssignment.eContents().get(0);
		
		//StringOverRead:
		//	overRead=STRING;
		public ParserRule getRule() { return rule; }

		//overRead=STRING
		public Assignment getOverReadAssignment() { return cOverReadAssignment; }

		//STRING
		public RuleCall getOverReadSTRINGTerminalRuleCall_0() { return cOverReadSTRINGTerminalRuleCall_0; }
	}

	public class StringKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringKeyAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cKeyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOfTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//StringKey:
		//	{StringKey} (name=ID "=")? "Key" "ofType" type=Type;
		public ParserRule getRule() { return rule; }

		//{StringKey} (name=ID "=")? "Key" "ofType" type=Type
		public Group getGroup() { return cGroup; }

		//{StringKey}
		public Action getStringKeyAction_0() { return cStringKeyAction_0; }

		//(name=ID "=")?
		public Group getGroup_1() { return cGroup_1; }

		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//"Key"
		public Keyword getKeyKeyword_2() { return cKeyKeyword_2; }

		//"ofType"
		public Keyword getOfTypeKeyword_3() { return cOfTypeKeyword_3; }

		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOfTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cToKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cToKeyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cToKeyStringKeyCrossReference_5_1_0 = (CrossReference)cToKeyAssignment_5_1.eContents().get(0);
		private final RuleCall cToKeyStringKeyIDTerminalRuleCall_5_1_0_1 = (RuleCall)cToKeyStringKeyCrossReference_5_1_0.eContents().get(1);
		
		//StringValue:
		//	{StringValue} (name=ID "=")? "Value" "ofType" type=Type ("to" toKey=[StringKey])?;
		public ParserRule getRule() { return rule; }

		//{StringValue} (name=ID "=")? "Value" "ofType" type=Type ("to" toKey=[StringKey])?
		public Group getGroup() { return cGroup; }

		//{StringValue}
		public Action getStringValueAction_0() { return cStringValueAction_0; }

		//(name=ID "=")?
		public Group getGroup_1() { return cGroup_1; }

		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//"Value"
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }

		//"ofType"
		public Keyword getOfTypeKeyword_3() { return cOfTypeKeyword_3; }

		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }

		//("to" toKey=[StringKey])?
		public Group getGroup_5() { return cGroup_5; }

		//"to"
		public Keyword getToKeyword_5_0() { return cToKeyword_5_0; }

		//toKey=[StringKey]
		public Assignment getToKeyAssignment_5_1() { return cToKeyAssignment_5_1; }

		//[StringKey]
		public CrossReference getToKeyStringKeyCrossReference_5_1_0() { return cToKeyStringKeyCrossReference_5_1_0; }

		//ID
		public RuleCall getToKeyStringKeyIDTerminalRuleCall_5_1_0_1() { return cToKeyStringKeyIDTerminalRuleCall_5_1_0_1; }
	}

	public class StringOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringOrAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOptionStringDescriptionInVariableCrossReference_3_0 = (CrossReference)cOptionAssignment_3.eContents().get(0);
		private final RuleCall cOptionStringDescriptionInVariableIDTerminalRuleCall_3_0_1 = (RuleCall)cOptionStringDescriptionInVariableCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOptionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cOptionStringDescriptionInVariableCrossReference_4_1_0 = (CrossReference)cOptionAssignment_4_1.eContents().get(0);
		private final RuleCall cOptionStringDescriptionInVariableIDTerminalRuleCall_4_1_0_1 = (RuleCall)cOptionStringDescriptionInVariableCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StringOr:
		//	{StringOr} "or" "(" option+=[StringDescriptionInVariable] ("|" option+=[StringDescriptionInVariable])* ")";
		public ParserRule getRule() { return rule; }

		//{StringOr} "or" "(" option+=[StringDescriptionInVariable] ("|" option+=[StringDescriptionInVariable])* ")"
		public Group getGroup() { return cGroup; }

		//{StringOr}
		public Action getStringOrAction_0() { return cStringOrAction_0; }

		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//option+=[StringDescriptionInVariable]
		public Assignment getOptionAssignment_3() { return cOptionAssignment_3; }

		//[StringDescriptionInVariable]
		public CrossReference getOptionStringDescriptionInVariableCrossReference_3_0() { return cOptionStringDescriptionInVariableCrossReference_3_0; }

		//ID
		public RuleCall getOptionStringDescriptionInVariableIDTerminalRuleCall_3_0_1() { return cOptionStringDescriptionInVariableIDTerminalRuleCall_3_0_1; }

		//("|" option+=[StringDescriptionInVariable])*
		public Group getGroup_4() { return cGroup_4; }

		//"|"
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }

		//option+=[StringDescriptionInVariable]
		public Assignment getOptionAssignment_4_1() { return cOptionAssignment_4_1; }

		//[StringDescriptionInVariable]
		public CrossReference getOptionStringDescriptionInVariableCrossReference_4_1_0() { return cOptionStringDescriptionInVariableCrossReference_4_1_0; }

		//ID
		public RuleCall getOptionStringDescriptionInVariableIDTerminalRuleCall_4_1_0_1() { return cOptionStringDescriptionInVariableIDTerminalRuleCall_4_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class StringDescriptionInVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringDescriptionInVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionStringDescriptionInnerParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////StringDescriptionStore:
		////	{StringDescriptionStore}
		////	store+=StringDescriptionInner*
		////;
		//StringDescriptionInVariable:
		//	name=ID ":" "=" description+=StringDescriptionInner* ";";
		public ParserRule getRule() { return rule; }

		//name=ID ":" "=" description+=StringDescriptionInner* ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//description+=StringDescriptionInner*
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//StringDescriptionInner
		public RuleCall getDescriptionStringDescriptionInnerParserRuleCall_3_0() { return cDescriptionStringDescriptionInnerParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class StringComplexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringComplex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameStringDescriptionInVariableCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameStringDescriptionInVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cNameStringDescriptionInVariableCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cManyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cManyAsteriskKeyword_1_0_0 = (Keyword)cManyAssignment_1_0.eContents().get(0);
		private final Assignment cMaybeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cMaybeQuestionMarkKeyword_1_1_0 = (Keyword)cMaybeAssignment_1_1.eContents().get(0);
		
		//StringComplex:
		//	name=[StringDescriptionInVariable] (many="*" | maybe="?");
		public ParserRule getRule() { return rule; }

		//name=[StringDescriptionInVariable] (many="*" | maybe="?")
		public Group getGroup() { return cGroup; }

		//name=[StringDescriptionInVariable]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[StringDescriptionInVariable]
		public CrossReference getNameStringDescriptionInVariableCrossReference_0_0() { return cNameStringDescriptionInVariableCrossReference_0_0; }

		//ID
		public RuleCall getNameStringDescriptionInVariableIDTerminalRuleCall_0_0_1() { return cNameStringDescriptionInVariableIDTerminalRuleCall_0_0_1; }

		//many="*" | maybe="?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//many="*"
		public Assignment getManyAssignment_1_0() { return cManyAssignment_1_0; }

		//"*"
		public Keyword getManyAsteriskKeyword_1_0_0() { return cManyAsteriskKeyword_1_0_0; }

		//maybe="?"
		public Assignment getMaybeAssignment_1_1() { return cMaybeAssignment_1_1; }

		//"?"
		public Keyword getMaybeQuestionMarkKeyword_1_1_0() { return cMaybeQuestionMarkKeyword_1_1_0; }
	}

	public class ObjectDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionObjectDescriptionInnerParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////---------------------------  Object  ---------------------------
		//ObjectDescription:
		//	"Node" name=ID ":" "{" description+=ObjectDescriptionInner* "}";
		public ParserRule getRule() { return rule; }

		//"Node" name=ID ":" "{" description+=ObjectDescriptionInner* "}"
		public Group getGroup() { return cGroup; }

		//"Node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//description+=ObjectDescriptionInner*
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//ObjectDescriptionInner
		public RuleCall getDescriptionObjectDescriptionInnerParserRuleCall_4_0() { return cDescriptionObjectDescriptionInnerParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ObjectDescriptionInnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectDescriptionInner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cObjectNodeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cObjectAttributeParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cObjectNextParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cObjectMaybeParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cObjectManyParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cObjectChoiceParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ObjectDescriptionInner:
		//	(ObjectNode | ObjectAttribute | ObjectNext | ObjectMaybe | ObjectMany | ObjectChoice) ";";
		public ParserRule getRule() { return rule; }

		//(ObjectNode | ObjectAttribute | ObjectNext | ObjectMaybe | ObjectMany | ObjectChoice) ";"
		public Group getGroup() { return cGroup; }

		//ObjectNode | ObjectAttribute | ObjectNext | ObjectMaybe | ObjectMany | ObjectChoice
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ObjectNode
		public RuleCall getObjectNodeParserRuleCall_0_0() { return cObjectNodeParserRuleCall_0_0; }

		//ObjectAttribute
		public RuleCall getObjectAttributeParserRuleCall_0_1() { return cObjectAttributeParserRuleCall_0_1; }

		//ObjectNext
		public RuleCall getObjectNextParserRuleCall_0_2() { return cObjectNextParserRuleCall_0_2; }

		//ObjectMaybe
		public RuleCall getObjectMaybeParserRuleCall_0_3() { return cObjectMaybeParserRuleCall_0_3; }

		//ObjectMany
		public RuleCall getObjectManyParserRuleCall_0_4() { return cObjectManyParserRuleCall_0_4; }

		//ObjectChoice
		public RuleCall getObjectChoiceParserRuleCall_0_5() { return cObjectChoiceParserRuleCall_0_5; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ObjectAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesIDTerminalRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStringMethodeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStringMethodeStringDescriptionCrossReference_2_1_0 = (CrossReference)cStringMethodeAssignment_2_1.eContents().get(0);
		private final RuleCall cStringMethodeStringDescriptionIDTerminalRuleCall_2_1_0_1 = (RuleCall)cStringMethodeStringDescriptionCrossReference_2_1_0.eContents().get(1);
		
		//ObjectAttribute:
		//	"hasAttribute" attributes=ID ("as" stringMethode=[StringDescription])? // 'ofType' types=[jvmTypes::JvmType | QualifiedName] 
		//;
		public ParserRule getRule() { return rule; }

		//"hasAttribute" attributes=ID ("as" stringMethode=[StringDescription])? // 'ofType' types=[jvmTypes::JvmType | QualifiedName]
		public Group getGroup() { return cGroup; }

		//"hasAttribute"
		public Keyword getHasAttributeKeyword_0() { return cHasAttributeKeyword_0; }

		//attributes=ID
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//ID
		public RuleCall getAttributesIDTerminalRuleCall_1_0() { return cAttributesIDTerminalRuleCall_1_0; }

		//("as" stringMethode=[StringDescription])?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//stringMethode=[StringDescription]
		public Assignment getStringMethodeAssignment_2_1() { return cStringMethodeAssignment_2_1; }

		//[StringDescription]
		public CrossReference getStringMethodeStringDescriptionCrossReference_2_1_0() { return cStringMethodeStringDescriptionCrossReference_2_1_0; }

		//ID
		public RuleCall getStringMethodeStringDescriptionIDTerminalRuleCall_2_1_0_1() { return cStringMethodeStringDescriptionIDTerminalRuleCall_2_1_0_1; }
	}

	public class ObjectNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesIDTerminalRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInnerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInnerObjectDescriptionCrossReference_3_0 = (CrossReference)cInnerAssignment_3.eContents().get(0);
		private final RuleCall cInnerObjectDescriptionIDTerminalRuleCall_3_0_1 = (RuleCall)cInnerObjectDescriptionCrossReference_3_0.eContents().get(1);
		
		//ObjectNode:
		//	"hasNode" attributes=ID "as" inner=[ObjectDescription];
		public ParserRule getRule() { return rule; }

		//"hasNode" attributes=ID "as" inner=[ObjectDescription]
		public Group getGroup() { return cGroup; }

		//"hasNode"
		public Keyword getHasNodeKeyword_0() { return cHasNodeKeyword_0; }

		//attributes=ID
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//ID
		public RuleCall getAttributesIDTerminalRuleCall_1_0() { return cAttributesIDTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//inner=[ObjectDescription]
		public Assignment getInnerAssignment_3() { return cInnerAssignment_3; }

		//[ObjectDescription]
		public CrossReference getInnerObjectDescriptionCrossReference_3_0() { return cInnerObjectDescriptionCrossReference_3_0; }

		//ID
		public RuleCall getInnerObjectDescriptionIDTerminalRuleCall_3_0_1() { return cInnerObjectDescriptionIDTerminalRuleCall_3_0_1; }
	}

	public class ObjectNextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectNext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHasNextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeJavaCodeOrIDParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectDesriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cObjectDesriptionObjectDescriptionCrossReference_3_0 = (CrossReference)cObjectDesriptionAssignment_3.eContents().get(0);
		private final RuleCall cObjectDesriptionObjectDescriptionIDTerminalRuleCall_3_0_1 = (RuleCall)cObjectDesriptionObjectDescriptionCrossReference_3_0.eContents().get(1);
		
		//ObjectNext:
		//	"hasNext" attribute=JavaCodeOrID "as" objectDesription=[ObjectDescription];
		public ParserRule getRule() { return rule; }

		//"hasNext" attribute=JavaCodeOrID "as" objectDesription=[ObjectDescription]
		public Group getGroup() { return cGroup; }

		//"hasNext"
		public Keyword getHasNextKeyword_0() { return cHasNextKeyword_0; }

		//attribute=JavaCodeOrID
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//JavaCodeOrID
		public RuleCall getAttributeJavaCodeOrIDParserRuleCall_1_0() { return cAttributeJavaCodeOrIDParserRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//objectDesription=[ObjectDescription]
		public Assignment getObjectDesriptionAssignment_3() { return cObjectDesriptionAssignment_3; }

		//[ObjectDescription]
		public CrossReference getObjectDesriptionObjectDescriptionCrossReference_3_0() { return cObjectDesriptionObjectDescriptionCrossReference_3_0; }

		//ID
		public RuleCall getObjectDesriptionObjectDescriptionIDTerminalRuleCall_3_0_1() { return cObjectDesriptionObjectDescriptionIDTerminalRuleCall_3_0_1; }
	}

	public class JavaCodeOrIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaCodeOrID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cJavaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCodeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCodeSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cCodeAssignment_0_2.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//JavaCodeOrID:
		//	"java" ":" code=STRING | id=ID;
		public ParserRule getRule() { return rule; }

		//"java" ":" code=STRING | id=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"java" ":" code=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"java"
		public Keyword getJavaKeyword_0_0() { return cJavaKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//code=STRING
		public Assignment getCodeAssignment_0_2() { return cCodeAssignment_0_2; }

		//STRING
		public RuleCall getCodeSTRINGTerminalRuleCall_0_2_0() { return cCodeSTRINGTerminalRuleCall_0_2_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cShortKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLongKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFloatKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDoubleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCharKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cStringKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cByteKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//Type:
		//	"boolean" | "short" | "int" | "long" | "float" | "double" | "char" | "String" | "byte";
		public ParserRule getRule() { return rule; }

		//"boolean" | "short" | "int" | "long" | "float" | "double" | "char" | "String" | "byte"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//"short"
		public Keyword getShortKeyword_1() { return cShortKeyword_1; }

		//"int"
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }

		//"long"
		public Keyword getLongKeyword_3() { return cLongKeyword_3; }

		//"float"
		public Keyword getFloatKeyword_4() { return cFloatKeyword_4; }

		//"double"
		public Keyword getDoubleKeyword_5() { return cDoubleKeyword_5; }

		//"char"
		public Keyword getCharKeyword_6() { return cCharKeyword_6; }

		//"String"
		public Keyword getStringKeyword_7() { return cStringKeyword_7; }

		//"byte"
		public Keyword getByteKeyword_8() { return cByteKeyword_8; }
	}

	public class ObjectManyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectMany");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOptionObjectMaybeInnerParserRuleCall_0_0 = (RuleCall)cOptionAssignment_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ObjectMany:
		//	option=ObjectMaybeInner "*";
		public ParserRule getRule() { return rule; }

		//option=ObjectMaybeInner "*"
		public Group getGroup() { return cGroup; }

		//option=ObjectMaybeInner
		public Assignment getOptionAssignment_0() { return cOptionAssignment_0; }

		//ObjectMaybeInner
		public RuleCall getOptionObjectMaybeInnerParserRuleCall_0_0() { return cOptionObjectMaybeInnerParserRuleCall_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class ObjectChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsObjectMaybeInnerParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOptionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOptionsObjectMaybeInnerParserRuleCall_2_1_0 = (RuleCall)cOptionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectChoice:
		//	"(" options+=ObjectMaybeInner ("|" options+=ObjectMaybeInner)* ")";
		public ParserRule getRule() { return rule; }

		//"(" options+=ObjectMaybeInner ("|" options+=ObjectMaybeInner)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//options+=ObjectMaybeInner
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }

		//ObjectMaybeInner
		public RuleCall getOptionsObjectMaybeInnerParserRuleCall_1_0() { return cOptionsObjectMaybeInnerParserRuleCall_1_0; }

		//("|" options+=ObjectMaybeInner)*
		public Group getGroup_2() { return cGroup_2; }

		//"|"
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }

		//options+=ObjectMaybeInner
		public Assignment getOptionsAssignment_2_1() { return cOptionsAssignment_2_1; }

		//ObjectMaybeInner
		public RuleCall getOptionsObjectMaybeInnerParserRuleCall_2_1_0() { return cOptionsObjectMaybeInnerParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ObjectMaybeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectMaybe");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOptionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cOptionObjectDescriptionCrossReference_0_0 = (CrossReference)cOptionAssignment_0.eContents().get(0);
		private final RuleCall cOptionObjectDescriptionIDTerminalRuleCall_0_0_1 = (RuleCall)cOptionObjectDescriptionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDescriptionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDescriptionObjectMaybeInnerParserRuleCall_1_0_0 = (RuleCall)cDescriptionAssignment_1_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ObjectMaybe:
		//	option=[ObjectDescription] | description=ObjectMaybeInner "?";
		public ParserRule getRule() { return rule; }

		//option=[ObjectDescription] | description=ObjectMaybeInner "?"
		public Alternatives getAlternatives() { return cAlternatives; }

		//option=[ObjectDescription]
		public Assignment getOptionAssignment_0() { return cOptionAssignment_0; }

		//[ObjectDescription]
		public CrossReference getOptionObjectDescriptionCrossReference_0_0() { return cOptionObjectDescriptionCrossReference_0_0; }

		//ID
		public RuleCall getOptionObjectDescriptionIDTerminalRuleCall_0_0_1() { return cOptionObjectDescriptionIDTerminalRuleCall_0_0_1; }

		//description=ObjectMaybeInner "?"
		public Group getGroup_1() { return cGroup_1; }

		//description=ObjectMaybeInner
		public Assignment getDescriptionAssignment_1_0() { return cDescriptionAssignment_1_0; }

		//ObjectMaybeInner
		public RuleCall getDescriptionObjectMaybeInnerParserRuleCall_1_0_0() { return cDescriptionObjectMaybeInnerParserRuleCall_1_0_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
	}

	public class ObjectMaybeInnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectMaybeInner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectNextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cObjectAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ObjectMaybeInner:
		//	ObjectNext | ObjectNode | ObjectAttribute;
		public ParserRule getRule() { return rule; }

		//ObjectNext | ObjectNode | ObjectAttribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//ObjectNext
		public RuleCall getObjectNextParserRuleCall_0() { return cObjectNextParserRuleCall_0; }

		//ObjectNode
		public RuleCall getObjectNodeParserRuleCall_1() { return cObjectNodeParserRuleCall_1; }

		//ObjectAttribute
		public RuleCall getObjectAttributeParserRuleCall_2() { return cObjectAttributeParserRuleCall_2; }
	}
	
	
	private final DTDSLElements pDTDSL;
	private final StartPointElements pStartPoint;
	private final AbstractElements pAbstract;
	private final StringDescriptionElements pStringDescription;
	private final StringDescriptionInnerElements pStringDescriptionInner;
	private final StringOverReadElements pStringOverRead;
	private final StringKeyElements pStringKey;
	private final StringValueElements pStringValue;
	private final StringOrElements pStringOr;
	private final StringDescriptionInVariableElements pStringDescriptionInVariable;
	private final StringComplexElements pStringComplex;
	private final ObjectDescriptionElements pObjectDescription;
	private final ObjectDescriptionInnerElements pObjectDescriptionInner;
	private final ObjectAttributeElements pObjectAttribute;
	private final ObjectNodeElements pObjectNode;
	private final ObjectNextElements pObjectNext;
	private final JavaCodeOrIDElements pJavaCodeOrID;
	private final TypeElements pType;
	private final ObjectManyElements pObjectMany;
	private final ObjectChoiceElements pObjectChoice;
	private final ObjectMaybeElements pObjectMaybe;
	private final ObjectMaybeInnerElements pObjectMaybeInner;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DTDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDTDSL = new DTDSLElements();
		this.pStartPoint = new StartPointElements();
		this.pAbstract = new AbstractElements();
		this.pStringDescription = new StringDescriptionElements();
		this.pStringDescriptionInner = new StringDescriptionInnerElements();
		this.pStringOverRead = new StringOverReadElements();
		this.pStringKey = new StringKeyElements();
		this.pStringValue = new StringValueElements();
		this.pStringOr = new StringOrElements();
		this.pStringDescriptionInVariable = new StringDescriptionInVariableElements();
		this.pStringComplex = new StringComplexElements();
		this.pObjectDescription = new ObjectDescriptionElements();
		this.pObjectDescriptionInner = new ObjectDescriptionInnerElements();
		this.pObjectAttribute = new ObjectAttributeElements();
		this.pObjectNode = new ObjectNodeElements();
		this.pObjectNext = new ObjectNextElements();
		this.pJavaCodeOrID = new JavaCodeOrIDElements();
		this.pType = new TypeElements();
		this.pObjectMany = new ObjectManyElements();
		this.pObjectChoice = new ObjectChoiceElements();
		this.pObjectMaybe = new ObjectMaybeElements();
		this.pObjectMaybeInner = new ObjectMaybeInnerElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.wbg.DTDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DTDSL:
	//	"parserName" "=" parserName=STRING ";" objDescription+=Abstract* start=StartPoint;
	public DTDSLElements getDTDSLAccess() {
		return pDTDSL;
	}
	
	public ParserRule getDTDSLRule() {
		return getDTDSLAccess().getRule();
	}

	//StartPoint:
	//	"beginWith" "=" begin=[ObjectDescription] | begin=[StringDescription] ";";
	public StartPointElements getStartPointAccess() {
		return pStartPoint;
	}
	
	public ParserRule getStartPointRule() {
		return getStartPointAccess().getRule();
	}

	//Abstract:
	//	ObjectDescription | //| ObjectHashMapDescription
	//	StringDescription;
	public AbstractElements getAbstractAccess() {
		return pAbstract;
	}
	
	public ParserRule getAbstractRule() {
		return getAbstractAccess().getRule();
	}

	////---------------------------  String  ---------------------------
	//StringDescription:
	//	"String" name=ID ":" "{" description+=StringDescriptionInner* "}";
	public StringDescriptionElements getStringDescriptionAccess() {
		return pStringDescription;
	}
	
	public ParserRule getStringDescriptionRule() {
		return getStringDescriptionAccess().getRule();
	}

	//StringDescriptionInner:
	//	StringOverRead | StringKey | StringValue | keyRef=[StringKey] | StringComplex | StringOr |
	//	StringDescriptionInVariable;
	public StringDescriptionInnerElements getStringDescriptionInnerAccess() {
		return pStringDescriptionInner;
	}
	
	public ParserRule getStringDescriptionInnerRule() {
		return getStringDescriptionInnerAccess().getRule();
	}

	//StringOverRead:
	//	overRead=STRING;
	public StringOverReadElements getStringOverReadAccess() {
		return pStringOverRead;
	}
	
	public ParserRule getStringOverReadRule() {
		return getStringOverReadAccess().getRule();
	}

	//StringKey:
	//	{StringKey} (name=ID "=")? "Key" "ofType" type=Type;
	public StringKeyElements getStringKeyAccess() {
		return pStringKey;
	}
	
	public ParserRule getStringKeyRule() {
		return getStringKeyAccess().getRule();
	}

	//StringValue:
	//	{StringValue} (name=ID "=")? "Value" "ofType" type=Type ("to" toKey=[StringKey])?;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//StringOr:
	//	{StringOr} "or" "(" option+=[StringDescriptionInVariable] ("|" option+=[StringDescriptionInVariable])* ")";
	public StringOrElements getStringOrAccess() {
		return pStringOr;
	}
	
	public ParserRule getStringOrRule() {
		return getStringOrAccess().getRule();
	}

	////StringDescriptionStore:
	////	{StringDescriptionStore}
	////	store+=StringDescriptionInner*
	////;
	//StringDescriptionInVariable:
	//	name=ID ":" "=" description+=StringDescriptionInner* ";";
	public StringDescriptionInVariableElements getStringDescriptionInVariableAccess() {
		return pStringDescriptionInVariable;
	}
	
	public ParserRule getStringDescriptionInVariableRule() {
		return getStringDescriptionInVariableAccess().getRule();
	}

	//StringComplex:
	//	name=[StringDescriptionInVariable] (many="*" | maybe="?");
	public StringComplexElements getStringComplexAccess() {
		return pStringComplex;
	}
	
	public ParserRule getStringComplexRule() {
		return getStringComplexAccess().getRule();
	}

	////---------------------------  Object  ---------------------------
	//ObjectDescription:
	//	"Node" name=ID ":" "{" description+=ObjectDescriptionInner* "}";
	public ObjectDescriptionElements getObjectDescriptionAccess() {
		return pObjectDescription;
	}
	
	public ParserRule getObjectDescriptionRule() {
		return getObjectDescriptionAccess().getRule();
	}

	//ObjectDescriptionInner:
	//	(ObjectNode | ObjectAttribute | ObjectNext | ObjectMaybe | ObjectMany | ObjectChoice) ";";
	public ObjectDescriptionInnerElements getObjectDescriptionInnerAccess() {
		return pObjectDescriptionInner;
	}
	
	public ParserRule getObjectDescriptionInnerRule() {
		return getObjectDescriptionInnerAccess().getRule();
	}

	//ObjectAttribute:
	//	"hasAttribute" attributes=ID ("as" stringMethode=[StringDescription])? // 'ofType' types=[jvmTypes::JvmType | QualifiedName] 
	//;
	public ObjectAttributeElements getObjectAttributeAccess() {
		return pObjectAttribute;
	}
	
	public ParserRule getObjectAttributeRule() {
		return getObjectAttributeAccess().getRule();
	}

	//ObjectNode:
	//	"hasNode" attributes=ID "as" inner=[ObjectDescription];
	public ObjectNodeElements getObjectNodeAccess() {
		return pObjectNode;
	}
	
	public ParserRule getObjectNodeRule() {
		return getObjectNodeAccess().getRule();
	}

	//ObjectNext:
	//	"hasNext" attribute=JavaCodeOrID "as" objectDesription=[ObjectDescription];
	public ObjectNextElements getObjectNextAccess() {
		return pObjectNext;
	}
	
	public ParserRule getObjectNextRule() {
		return getObjectNextAccess().getRule();
	}

	//JavaCodeOrID:
	//	"java" ":" code=STRING | id=ID;
	public JavaCodeOrIDElements getJavaCodeOrIDAccess() {
		return pJavaCodeOrID;
	}
	
	public ParserRule getJavaCodeOrIDRule() {
		return getJavaCodeOrIDAccess().getRule();
	}

	//Type:
	//	"boolean" | "short" | "int" | "long" | "float" | "double" | "char" | "String" | "byte";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ObjectMany:
	//	option=ObjectMaybeInner "*";
	public ObjectManyElements getObjectManyAccess() {
		return pObjectMany;
	}
	
	public ParserRule getObjectManyRule() {
		return getObjectManyAccess().getRule();
	}

	//ObjectChoice:
	//	"(" options+=ObjectMaybeInner ("|" options+=ObjectMaybeInner)* ")";
	public ObjectChoiceElements getObjectChoiceAccess() {
		return pObjectChoice;
	}
	
	public ParserRule getObjectChoiceRule() {
		return getObjectChoiceAccess().getRule();
	}

	//ObjectMaybe:
	//	option=[ObjectDescription] | description=ObjectMaybeInner "?";
	public ObjectMaybeElements getObjectMaybeAccess() {
		return pObjectMaybe;
	}
	
	public ParserRule getObjectMaybeRule() {
		return getObjectMaybeAccess().getRule();
	}

	//ObjectMaybeInner:
	//	ObjectNext | ObjectNode | ObjectAttribute;
	public ObjectMaybeInnerElements getObjectMaybeInnerAccess() {
		return pObjectMaybeInner;
	}
	
	public ParserRule getObjectMaybeInnerRule() {
		return getObjectMaybeInnerAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
