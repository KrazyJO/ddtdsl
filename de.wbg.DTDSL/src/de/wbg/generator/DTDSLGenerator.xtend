/*
 * generated by Xtext
 */
package de.wbg.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import de.wbg.dTDSL.DTDSL
import de.wbg.dTDSL.Choice
import de.wbg.dTDSL.Many
import de.wbg.dTDSL.Keyword
import de.wbg.dTDSL.ObjectDescription
import de.wbg.NodeGen
import de.wbg.dTDSL.ObjectAttribute
import de.wbg.dTDSL.ObjectNext
import de.wbg.ExceptionGen

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class DTDSLGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))

		var nodeGen = new NodeGen()
		var exceptionGen = new ExceptionGen()

		fsa.generateFile('de/wbg/dtdsl/Node.java', nodeGen.generateNode)
		fsa.generateFile('de/wbg/dtdsl/Head.java', nodeGen.generateHead)
		fsa.generateFile('de/wbg/dtdsl/Attribute.java', nodeGen.generateAttribute)
		fsa.generateFile('de/wbg/dtdsl/Element.java', nodeGen.generateElement)

		fsa.generateFile('de/wbg/dtdsl/ParserException.java', exceptionGen.exceptionGenerator)

		for (model: resource.allContents.toIterable.filter(DTDSL))
		{
			fsa.generateFile('de/wbg/dtdsl/' + model.parserName + '.java', 
				if (model.type == "javaObject") 
				{
					
					model.compile();
				}
				else if (model.type == "string")
				{
					//TODO compileString
				}			
			);	
		}
	}
	
	def CharSequence compile(DTDSL model)
	{
		var ret = ''''''
		
		ret += '''
		package de.wbg.dtdsl;
		
		import java.lang.reflect.Field;
		
		class «model.parserName.toFirstUpper» {
			
			private Head headNode;
			private Element actualNode;
			
			public «model.parserName.toFirstUpper»()
			{
				this.headNode = new Head();
«««				this.headNode.setKey(false);
«««				this.headNode.setName("HeadNode");
«««				this.headNode.setValue("none");
				this.actualNode = this.headNode;
			}
			
			public Head parse(Object o)
			{
				//model.start
				try {
					parse«model.start.begin.name»(o, actualNode);
				}
				catch (Exception e)
				{
					System.err.println(e.getMessage());
					//e.printStackTrace();
				}
				
				return headNode;
			}
			
		'''
		for (d: model.objDescription)
		{
			if (d instanceof ObjectDescription) 
			{
				ret+=
				'''	private void parse«d.name»(Object o, Element n) throws Exception
	{
		'''for (i: d.description)
			{
				if (i instanceof ObjectAttribute) {ret += i.compile}
				if (i instanceof ObjectNext) {ret += i.compile}
						
			}
			ret+= '''		//actualNode.getChildren().add(node);
		actualNode = n;
	}
			
			'''	
			}
			
			
		}
		
		ret += '''
		}
		
		'''
		
		ret
	}
	
	def CharSequence compile(ObjectAttribute a)
	{
		var ret = '''		//Attribute
		'''
		
		if (a.inner == null) {
			ret += '''		//inner == null
		//«a.types» «a.attributes» as «a.keyword.name»;
		«if (a.keyword.name == 'Key')
		{
			'''Node node = new Node();
node.setParent(n);
n.addChild(node);
	
try {
	Field f = o.getClass().getDeclaredField("«a.attributes»"); //NoSuchFieldException
	f.setAccessible(true);
	«a.types» iWantThis = («a.types») f.get(o); //IllegalAccessException

	node.setName("«a.attributes»");
	node.setValue(String.valueOf(iWantThis));
	node.setKey(true);
} 
catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException | NullPointerException e)
{
	//e.printStackTrace();
	throw new ParserException("Error while parsing «a.keyword.name»: «a.types» «a.attributes»");
}
'''
		}
		else if (a.keyword.name == 'Value')
		{
			'''try {
	Attribute valueNode = new Attribute();
	valueNode.setType("value");

	Field f = o.getClass().getDeclaredField("«a.attributes»"); //NoSuchFieldException
	f.setAccessible(true);
	«a.types» iWantThis = («a.types») f.get(o); //IllegalAccessException

	valueNode.setName("«a.attributes»");
	valueNode.setValue(String.valueOf(iWantThis));
	valueNode.setType("value");
	
	valueNode.setParent(node);
	node.getChildren().add(valueNode);
}
catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException | NullPointerException e)
{
	//e.printStackTrace();
	throw new ParserException("Error while parsing «a.keyword.name»: «a.types» «a.attributes»");
}
'''


		}»
			'''
		} else {
			ret += '''		//inner == «a.inner.name»
			'''
		}
		
		ret += '''
		
		'''
		
		ret
	}
	
	def CharSequence compile(ObjectNext n)
	{
		'''		//Next: 
		«if (n.attribute.code == null)
		{
			var ret = '''//kein code: «n.attribute.id»
			'''
			ret += '''
			try {
				Field f = o.getClass().getDeclaredField("«n.attribute.id»"); //NoSuchFieldException
				f.setAccessible(true);
				Object next = (Object) f.get(o); //IllegalAccessException
			
				parse«n.objectDesription.name»(next, n);
			}
			catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException | NullPointerException e)
			{
				throw new ParserException("Error while parsing «n.attribute.id»");
			}
			'''
			ret
		}
		else
		{
			'''//code: «n.attribute.code»'''
		}
		»
		'''	
	}
}
