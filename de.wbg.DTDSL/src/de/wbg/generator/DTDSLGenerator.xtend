/*
 * generated by Xtext
 */
package de.wbg.generator

import de.wbg.ExceptionGen
import de.wbg.ExtraMethodsGen
import de.wbg.NodeGen
import de.wbg.dTDSL.Abstract
import de.wbg.dTDSL.DTDSL
import de.wbg.dTDSL.ObjectAttribute
import de.wbg.dTDSL.ObjectDescription
import de.wbg.dTDSL.ObjectDescriptionInner
import de.wbg.dTDSL.ObjectMany
import de.wbg.dTDSL.ObjectMaybe
import de.wbg.dTDSL.ObjectNext
import de.wbg.dTDSL.ObjectNode
import de.wbg.extra.ChainMaybe
import de.wbg.extra.ObjectMaybeAttribute
import de.wbg.extra.ObjectMaybeNext
import de.wbg.extra.ObjectMaybeNode
import java.util.LinkedList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import de.wbg.extra.ChainMethodsInner
import de.wbg.extra.ChainMethodsInnerObjectAttribute
import de.wbg.extra.ChainMethodsInnerObjectMany
import de.wbg.extra.ChainMethodsInnerObjectMaybe
import de.wbg.extra.ChainMethodsInnerObjectNext
import de.wbg.extra.ChainMethodsInnerObjectNode

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class DTDSLGenerator implements IGenerator {
	
	var needGetInstanceGenerated = false;
	var LinkedList<ChainMaybe> objectMaybeChain;
	var LinkedList<ChainMethodsInner> methodsInnerChain;
	
	def boolean getNeedGetInstanceGenerated()
	{
		this.needGetInstanceGenerated
	}
	
	def void setNeedGetInstanceGenerated(boolean value)
	{
		this.needGetInstanceGenerated = value
	}
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {

		needGetInstanceGenerated = false;
		var nodeGen = new NodeGen()
		var exceptionGen = new ExceptionGen()
		this.initObjectMaybeChain();
		this.initMethodsInnerChain();

		fsa.generateFile('de/wbg/dtdsl/Node.java', nodeGen.generateNode)
		fsa.generateFile('de/wbg/dtdsl/Head.java', nodeGen.generateHead)
		fsa.generateFile('de/wbg/dtdsl/Attribute.java', nodeGen.generateAttribute)
		fsa.generateFile('de/wbg/dtdsl/Element.java', nodeGen.generateElement)

		fsa.generateFile('de/wbg/dtdsl/ParserException.java', exceptionGen.exceptionGenerator)

		for (model: resource.allContents.toIterable.filter(DTDSL))
		{
			//extra Durchlauf für needGetInstanceGenerated (damit die imports generiert werden)
			model.compile();
		}

		for (model: resource.allContents.toIterable.filter(DTDSL))
		{
			fsa.generateFile('de/wbg/dtdsl/' + model.parserName + '.java', 
				if (model.type == "javaObject") 
				{
					
					model.compile();
				}
				else if (model.type == "string")
				{
					//TODO compileString
				}			
			);	
		}
	}
	
	def CharSequence compile(DTDSL model)
	{
		var ret = ''''''
		
		ret += '''
		package de.wbg.dtdsl;
		
		import java.lang.reflect.Field;
		«if (needGetInstanceGenerated)
		{
			'''
			import java.util.ArrayList;
			import java.util.HashMap;
			import java.util.LinkedList;
			'''				
		}»
		
		class «model.parserName.toFirstUpper» {
			
			private Head headNode;
			private Element actualNode;
			
			public «model.parserName.toFirstUpper»()
			{
				
			}
			
			public Head parse(Object o)
			{
				this.headNode = new Head("HEAD");
				this.actualNode = this.headNode;
				//model.start
				try {
					parse«model.start.begin.name»(o, actualNode);
				}
				catch (Exception e)
				{
					System.err.println(e.getMessage());
					//e.printStackTrace();
				}
				
				return headNode;
			}
			
		'''
		
		
		for (d: model.objDescription)
		{
			ret += compileMethods(d)
			//alle Fields innerhalb des Objektes
			if (d instanceof ObjectDescription) {ret += d.compileMethodsInner}
			
		}
		
		if (needGetInstanceGenerated)
		{
			var generator = new ExtraMethodsGen
			ret += generator.generateGetInstance 
		}
		
		ret += '''}
		
		'''
		
		ret
	}
	
	def CharSequence compileMethodsInner(ObjectDescription d)
	{
		var ret = ''''''
		
		for (i: d.description)
		{
			for (entry: methodsInnerChain)
			{
				if (entry.handle(d, i))
				{
					ret += entry.returnValue
				}
			}
		}	
		
		ret
	}
	
	def CharSequence compileMethods(Abstract d)
	{
		var ret = ''''''
		
		if (d instanceof ObjectDescription) 
		{
			
			ret+=
			'''	private void parse«d.name»(Object o, Element n) throws Exception
	{
		Node newNode = new Node("node"+n.increaseNodeNumber());
		newNode.setParent(n);
		n.addChild(newNode);	
	'''
	for (i: d.description)
		{
			ret +=
			'''		//{Element copy = n.copy();
		try 
		{
			«if (i instanceof ObjectAttribute)
		{
			'''parse«d.name.toFirstUpper»Attribute«i.attributes.toFirstUpper »(o, «i.argument»);''' 
		}
		else if (i instanceof ObjectNext)
		{
			'''parse«d.name.toFirstUpper»«i.objectDesription.name.toFirstUpper»(o, «i.argument»);'''
		} 
		else if (i instanceof ObjectNode)
		{
			'''parse«d.name.toFirstUpper»«i.attributes.toFirstUpper»(o, «i.argument»);'''
		}
		else if (i instanceof ObjectMaybe)
		{
			this.compileMethodMaybeCall(i, d)
		}
		else if (i instanceof ObjectMany)
		{
			this.compileMethodeManyCall(i, d)
		}»
			''' 
			
				ret+=
			'''		}
		catch (ParserException e)
		{
			newNode.setParent(null);
			n.removeChild(newNode);
			throw e;
		}
		
		if (newNode.getTotalLength() == 1)
		{
			//remove newNode
			newNode.setParent(null);
			n.removeChild(newNode);
		}
		
		actualNode = n;
	
			'''		
			
		}
		ret+= '''
}
		
		'''	
		
		}
			
		ret
	}
	
	def compileMethodeManyCall(ObjectMany many, ObjectDescription description) 
	{
		var ret = ''''''
		
		var i = many.option
		
		if (i instanceof ObjectAttribute)
		{
			ret += 
			'''
			Field f = o.getClass().getDeclaredField("«i.attributes»");
			f.setAccessible(true);
			Object next = (Object) f.get(o);
			Head manyHead = new Head("MANYHEAD");
			
			if (next instanceof «i.types»[])
			{
				«i.types»[] array = («i.types»[])next;
				for (int index = 0; index < array.length; index++)
				{
					parseMany«description.name.toFirstUpper»Attribute«i.attributes.toFirstUpper»(array[index], manyHead);
				}
			}
			else if (next instanceof ArrayList)
			{
				ArrayList al = (ArrayList)next;
				for (int index = 0; index < al.size(); index++)
				{
					«i.types» obj = («i.types»)al.get(index);
					parseMany«description.name.toFirstUpper»Attribute«i.attributes.toFirstUpper»(obj, manyHead);
				}
			}
			else if (next instanceof LinkedList)
			{
				LinkedList al = (LinkedList)next;
				for (int index = 0; index < al.size(); index++)
				{
					«i.types» obj = («i.types»)al.get(index);
					parseMany«description.name.toFirstUpper»Attribute«i.attributes.toFirstUpper»(obj, manyHead);
				}
			}
			else if (next instanceof HashMap)
				{
					HashMap hashMap = (HashMap) next;
					
					for (Object entry : hashMap.keySet())
					{
«««						Node entryNode = new Node("node" + newNode.increaseNodeNumber());
«««						node.setKey(true);
«««						node.setValue(String.valueOf(entry));
«««						node.setName(entry.getClass().toString().replace("class ", ""));
						
«««						//Attribute
						Object valueForEntry = hashMap.get(entry);
«««						Attribute attribute = new Attribute("attribute" + node.increaseAttributeNumber());
«««						attribute.setName("children");
						
«««						parse«i.objectDesription.name.toFirstUpper»(valueForEntry, manyHead);
						//entry is primitiv
						//=> Node with key -> Attribute with value
						Node node = new Node("node"+manyHead.increaseNodeNumber());
						node.setKey(true);
						node.setValue(String.valueOf(entry));
						node.setName(entry.getClass().toString().replace("class ", ""));
						Attribute attrib = new Attribute("attribute"+node.increaseAttributeNumber());
						attrib.setName("«i.attributes»");
«««						attrib.setValue(String.valueOf(hashMap.get(entry)));
						attrib.setValue(hashMap.get(entry));
						attrib.setType(hashMap.get(entry).getClass());
						
						node.addChild(attrib);
						attrib.setParent(node);
						
						manyHead.addChild(node);
						node.setParent(manyHead);
					}
				}
			
			for (Element el: manyHead.getChildren())
			{
				newNode.addChild(el);
				el.setParent(newNode);
			}
			'''
		}
		else if (i instanceof ObjectNext)
		{
			ret += '''//many Next
			'''
			if (i.objectDesription != null)
			{
				var String call;
				if (i.attribute.id != null )
				{
					call = i.attribute.id
				}
				ret += '''
				Field f = o.getClass().getDeclaredField("«call»");
				f.setAccessible(true);
				Object next = (Object) f.get(o);
				Head manyHead = new Head("MANYHEAD");
				
				//String instance = this.getInstance(next);
				if (next instanceof Object[])
				{
					for (int index = 0; index < ((Object[])next).length; index++)
					{
						parse«i.objectDesription.name.toFirstUpper»(((Object[])next)[index], manyHead);
					}
				}
				else if (next instanceof ArrayList)
				{
					ArrayList al = (ArrayList)next;
					for (Object obj: al)
					{
						parse«i.objectDesription.name.toFirstUpper»(obj, manyHead);
					}
				}
				else if (next instanceof LinkedList)
				{
					LinkedList al = (LinkedList)next;
					for (Object obj: al)
					{
						parse«i.objectDesription.name.toFirstUpper»(obj, manyHead);
					}
				}
				else if (next instanceof HashMap)
				{
					HashMap hashMap = (HashMap) next;
					
					for (Object entry : hashMap.keySet())
					{
«««						Node entryNode = new Node("node" + newNode.increaseNodeNumber());
«««						node.setKey(true);
«««						node.setValue(String.valueOf(entry));
«««						node.setName(entry.getClass().toString().replace("class ", ""));
						
«««						//Attribute
						Object valueForEntry = hashMap.get(entry);
«««						Attribute attribute = new Attribute("attribute" + node.increaseAttributeNumber());
«««						attribute.setName("children");
						
						parse«i.objectDesription.name.toFirstUpper»(valueForEntry, manyHead);
						Node act = manyHead.getNodeByName("MANYHEAD.node"+(manyHead.size()-1));
						act.setKey(true);
						act.setValue(String.valueOf(entry));
						act.setName(entry.getClass().toString().replace("class ", ""));
					}
				}
				
				for (Element el : manyHead.getChildren())
				{
					n.addChild(el);
					el.setParent(n);
				}
				'''
				
			}
		}
		else if (i instanceof ObjectNode)
		{
			ret += '''
				Field f = o.getClass().getDeclaredField("«i.attributes»");
				f.setAccessible(true);
				Object next = (Object) f.get(o);
				Head manyHead = new Head("MANYHEAD");
				
				if (next instanceof Object[])
				{
					Object[] array = (Object[]) next;
					for (int index = 0; index < array.length; index++)
					{
						parse«i.inner.name.toFirstUpper»(array[index], manyHead);
					}
				}
				else if (next instanceof ArrayList)
				{
					ArrayList al = (ArrayList)next;
					for (Object obj: al)
					{
						parse«i.inner.name.toFirstUpper»(obj, manyHead);
					}
				}
				else if (next instanceof LinkedList)
				{
					LinkedList al = (LinkedList)next;
					for (Object obj: al)
					{
						parse«i.inner.name.toFirstUpper»(obj, manyHead);
					}
				}
				else if (next instanceof HashMap)
				{
					HashMap hashMap = (HashMap) next;
					
					for (Object entry : hashMap.keySet())
					{
«««						Node entryNode = new Node("node" + newNode.increaseNodeNumber());
«««						node.setKey(true);
«««						node.setValue(String.valueOf(entry));
«««						node.setName(entry.getClass().toString().replace("class ", ""));
						
«««						//Attribute
						Object valueForEntry = hashMap.get(entry);
«««						Attribute attribute = new Attribute("attribute" + node.increaseAttributeNumber());
«««						attribute.setName("children");
						
						parse«i.inner.name.toFirstUpper»(valueForEntry, manyHead);
						Node act = manyHead.getNodeByName("MANYHEAD.node"+(manyHead.size()-1));
						act.setKey(true);
						act.setValue(String.valueOf(entry));
						act.setName(entry.getClass().toString().replace("class ", ""));
					}
				}
				
				for (Element el : manyHead.getChildren())
				{
					newNode.addChild(el);
					el.setParent(newNode);
				}
			'''	
		}
		
		ret
	}


	def CharSequence compileMethodMaybeCall(ObjectMaybe i, ObjectDescription d)
	{
		if (i.description != null)
		{
			var inner = i.description;
			var CharSequence rValue;
			for (entry: this.objectMaybeChain)
			{
				if (entry.handle(inner, d, i))
				{
					rValue = entry.returnValue;
				}
			}
			
			rValue
		}
		else
		{
				//i.option ist gesetzt
				'''parse«i.option.name.toFirstUpper»();'''
				
		}
	}
	
	def CharSequence compileMany(ObjectMany m)
	{
		'''		//many
		'''
	}
	
	def CharSequence compile(ObjectNode n)
	{
		var ret = ''' //Node
		'''
		
		ret += '''
		try
		{
			Field f = o.getClass().getDeclaredField("«n.attributes»");
			f.setAccessible(true);
			Object next = (Object) f.get(o);
			parse«n.inner.name.toFirstUpper»(next, n);
		}
		catch(NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException | NullPointerException e)
		{
			throw new ParserException("Error while parsing «n.attributes» in «n»");
		}
		catch (ParserException e)
		{
			throw e;
		}
					'''
		ret
	}
	
	def CharSequence compile(ObjectAttribute a)
	{
		var ret = '''		//Attribute
		'''
		
//		if (a.inner == null) {
			ret += '''		//inner == null
//«a.types» «a.attributes» as ;
			'''
			
		
			ret += '''		int oldAttributeNumber = n.getAttributeNumber();
	try {

		Field f = o.getClass().getDeclaredField("«a.attributes»"); //NoSuchFieldException
		f.setAccessible(true);
«««		«a.types» iWantThis = («a.types») f.get(o); //IllegalAccessException
		Object iWantThis = f.get(o); 
	
		Attribute valueNode = new Attribute("attribute" + n.increaseAttributeNumber());
		valueNode.setType(iWantThis.getClass());
	
		valueNode.setName("«a.attributes»");
		valueNode.setValue(iWantThis);
«««		valueNode.setType("value");
		
		valueNode.setParent(n);
		n.getChildren().add(valueNode);
	}
	catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException | NullPointerException e)
	{
		//e.printStackTrace();
		n.setAttributeNumber(oldAttributeNumber);
		throw new ParserException("Error while parsing : «a.types» «a.attributes»");
	}
'''

//		}

		ret
	}
	
	def CharSequence compile(ObjectNext n)
	{
		'''		//Next: 
		«if (n.attribute.code == null)
		{
			var ret = '''//kein code: «n.attribute.id»
			'''
			ret += '''
			try {
				Field f = o.getClass().getDeclaredField("«n.attribute.id»"); //NoSuchFieldException
				f.setAccessible(true);
				Object next = (Object) f.get(o); //IllegalAccessException
			
				parse«n.objectDesription.name»(next, n);
				actualNode = n;
			}
			catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException | NullPointerException e)
			{
				throw new ParserException("Error while parsing «n.attribute.id»");
			}

			'''
			ret
		}
		else
		{
			'''//code: «n.attribute.code»'''
		}
		»
		'''	
	}
	
	def CharSequence getArgument(ObjectDescriptionInner d)
	{
		if (d instanceof ObjectNext)
		{
			'''n'''
		}
		else if (d instanceof ObjectAttribute)
		{
			'''newNode'''
		} 
		else
		{
			'''newNode'''
		}
	}
	
	//not for compiling
	def void initObjectMaybeChain()
	{
		this.objectMaybeChain = new LinkedList<ChainMaybe>();
		this.objectMaybeChain.add(new ObjectMaybeAttribute);
		this.objectMaybeChain.add(new ObjectMaybeNode);
		this.objectMaybeChain.add(new ObjectMaybeNext);
	}
	
	def initMethodsInnerChain() {
		this.methodsInnerChain = new LinkedList<ChainMethodsInner>()
		this.methodsInnerChain.add(new ChainMethodsInnerObjectAttribute)
		this.methodsInnerChain.add(new ChainMethodsInnerObjectMany(this))
		this.methodsInnerChain.add(new ChainMethodsInnerObjectMaybe(this))
		this.methodsInnerChain.add(new ChainMethodsInnerObjectNext)
		this.methodsInnerChain.add(new ChainMethodsInnerObjectNode)
	}
}
