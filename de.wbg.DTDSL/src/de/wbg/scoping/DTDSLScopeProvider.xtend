/*
 * generated by Xtext
 */
package de.wbg.scoping

import de.wbg.dTDSL.Abstract
import de.wbg.dTDSL.ObjectAttribute
import de.wbg.dTDSL.ObjectMaybe
import de.wbg.dTDSL.ObjectNext
import de.wbg.dTDSL.ObjectNode
import de.wbg.dTDSL.StartPoint
import de.wbg.dTDSL.StringDescription
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import de.wbg.dTDSL.ObjectDescription

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class DTDSLScopeProvider extends AbstractDeclarativeScopeProvider {

	//ObjectNext -> objectDescription
	def IScope scope_ObjectNext_objectDesription(ObjectNext next, EReference ref)
	{
		return Scopes.scopeFor(next.eResource.allContents.toIterable.filter(ObjectDescription))
	}
	
	//ObjectNode -> inner
	def IScope scope_ObjectNode_inner(ObjectNode node, EReference ref)
	{
		return Scopes.scopeFor(node.eResource.allContents.toIterable.filter(ObjectDescription))
	}
	
	//ObjectAttribute -> stringMethode
	def IScope scope_ObjectAttribute_stringMethode(ObjectAttribute attribute, EReference ref)
	{
		return Scopes.scopeFor(attribute.eResource.allContents.toIterable.filter(StringDescription))
	}
	
	//ObjectMaybe -> options
	def IScope scope_ObjectMaybe_option(ObjectMaybe maybe, EReference ref)
	{
		return Scopes.scopeFor(maybe.eResource.allContents.toIterable.filter(ObjectDescription))
	}
	
	//StartPoing
	def IScope scope_StartPoint_begin(StartPoint point, EReference ref)
	{
		return Scopes.scopeFor(point.eResource.allContents.toIterable.filter(Abstract))
	}
}
